[
	{
		"title": "Nodejs file watcher",
		"date": "2018-06-12 01:43",
		"fdate": "2018-06-11T20:13:00.000Z",
		"pdate": "2018-06-12",
		"author": "Angad Singh",
		"filename": "2018-06-12-node-file-watcher.html",
		"content": "\n<p>To see changes in the browser for this blog, I need to run the build script and refresh the browser manually. This can get tedious, so I decided to automate it.</p>\n\n<p>This is pretty easy to do in Node, because Node was built for realtime things like this. The <code>fs</code> module has a <code>watch</code> function which can watch directories and do stuff when files change. I can just run the build scriptusing <code>child_process.spawn</code>. Now I just need to find a way to reload the browser.</p>\n\n<p>The easiest way I can think of doing that is with applescript. This snippet reloads the active chrome tab -<script src=\"https://gist.github.com/angad19/a2737a773827ad3c0c489411b375be3b.js\"></script></p>\n\n<p>Great! Now we can just run the <code>osascript -e</code> command to run this snippet.<script src=\"https://gist.github.com/angad19/885226238eea218ee06135d9cc542993.js\"></script></p>\n\n<p>All we have to do now is setup <code>fs.watch</code> to watch our directories. I decided to use <code>chokidar</code> to watch the files since it's kinda hard to watch subdirectories with <code>fs.watch</code>.</p>\n\n<p>Here's the finished script - <script src=\"https://gist.github.com/angad19/96b8c2a987d0698be6fce3d3cc26093d.js\"></script></p>\n\n<p>Files beginning with <code>.#</code> are backup files created by Emacs, so we can ignore them. </p>\n<p>The reload is kinda jerky but I don't mind it. I won't be looking at the browser constantly.</p>\n"
	},
	{
		"title": "Ln: A simple, extensible static site generator",
		"date": "2018-06-11 16:21",
		"fdate": "2018-06-11T10:51:00.000Z",
		"pdate": "2018-06-11",
		"author": "Angad Singh",
		"filename": "2018-06-11-ln-static-gen.html",
		"content": "\n<p>I've started building a lot more projects. I wanted to write about problems I ran into, tools I used and just general stuff. I've tried a lot of ways to blog, and pretty much none of them fit into my workflow. <a href=\"https://jekyllrb.com\">Jekyll</a> felt overkill, I don't know React so <a href=\"https://gatsbyjs.com\">Gatsby</a> or anything React based was not an option. I'm not great at Python, so most of the Python-based options were out too. I also wanted a nice weekend project to work on after my SSAT was over.</p>\n\n<p>Writing my own generator was fun. It wasn't very difficult, but challenging enough to keep me interested. I wrote Ln in JavaScript, because I know JavaScript well enough to write usable software.</p>\n\n<p><a href=\"https://github.com/angad19/ln\">Ln</a> is a simple and extensible static site generator. It is made up of three components - <code>posts.json</code>, plugins and <code>config.js</code>. <code>posts.json</code> is a JSON file which contains an array of post objects. <code>posts.json</code> is read and an array of post objects is created. An ln plugin is just a function that takes an array of post objects and the config as params and returns a promise which resolves with an array of posts. So, for example, you could build a plugin that reads all org files in a directory, generates post objects from them and adds them to the posts array. After <code>awaiting</code> all the plugins, the modified array of post objects is written to <code>posts.json</code>. <code>config.js</code> exports an object whose properties can be accessed by all plugins.</p>\n\n<p>You can then run the index script to run the build function which calls all the plugins.</p>\n\n<p><a href=\"https://github.com/angad19/ln\">Check the project out on Github!</a></p>\n"
	}
]