[
	{
		"title": "Batch rename files with Dired",
		"date": "2018-06-12 16:25",
		"fdate": "2018-06-12T10:55:00.000Z",
		"pdate": "2018-06-12",
		"author": "Angad Singh",
		"filename": "2018-06-12-dired-batch-rename.html",
		"content": "\n<p>You can batch rename files with Dired.</p>\n\n<p>Open a Dired buffer (<code>C-x d</code>) with the sirectory in which you want to batch rename files. Run <code>dired-toggle-read-only</code> (bound to <code>C-c C-q</code> in dired-mode). Edit the buffer and <code>C-c C-c</code> to save, <code>C-c C-k</code> to abort.</p>\n\n<p>Yet another reason why Emacs is awesome!</p>\n",
		"display": true
	},
	{
		"title": "Nodejs file watcher",
		"date": "2018-06-12 01:43",
		"fdate": "2018-06-11T20:13:00.000Z",
		"pdate": "2018-06-12",
		"author": "Angad Singh",
		"filename": "2018-06-12-node-file-watcher.html",
		"content": "\n<p>To see changes in the browser for this blog, I need to run the build script and refresh the browser manually. This can get tedious, so I decided to automate it.</p>\n\n<p>This is pretty easy to do in Node, because Node was built for realtime things like this. The <code>fs</code> module has a <code>watch</code> function which can watch directories and do stuff when files change. I can just run the build script using <code>child_process.spawn</code>. Now I just need to find a way to reload the browser.</p>\n\n<p>The easiest way I can think of doing that is with applescript. This snippet reloads the active chrome tab -<script src=\"https://gist.github.com/angad19/a2737a773827ad3c0c489411b375be3b.js\"></script></p>\n\n<p>Great! Now we can just run the <code>osascript -e</code> command to run this snippet.<script src=\"https://gist.github.com/angad19/885226238eea218ee06135d9cc542993.js\"></script></p>\n\n<p>All we have to do now is setup <code>fs.watch</code> to watch our directories. I decided to use <a href=\"https://github.com/paulmillr/chokidar\">chokidar</a> to watch the files since it's kinda hard to watch subdirectories with <code>fs.watch</code>.</p>\n\n<p>Here's the finished script - <script src=\"https://gist.github.com/angad19/96b8c2a987d0698be6fce3d3cc26093d.js\"></script></p>\n\n<p>Files beginning with <code>.#</code> are backup files created by Emacs, so we can ignore them. </p>\n<p>The reload is kinda jerky but I don't mind it. I won't be looking at the browser constantly.</p>\n",
		"display": true
	},
	{
		"title": "How I generate my blog",
		"date": "2018-06-11 16:21",
		"fdate": "2018-06-11T10:51:00.000Z",
		"pdate": "2018-06-11",
		"author": "Angad Singh",
		"filename": "2018-06-11-blog-gen-process.html",
		"content": "\n<p>I've started building a lot more projects. I wanted to write about problems I ran into, tools I used and just general stuff. I've tried a lot of ways to blog, and pretty much none of them fit into my workflow. <a href=\"https://jekyllrb.com\">Jekyll</a> felt overkill, I don't know React so <a href=\"https://gatsbyjs.com\">Gatsby</a> or anything React based was not an option. I'm not great at Python, so most of the Python-based options were out too. I also wanted a nice weekend project to work on after my SSAT was over.</p>\n\n<p>Writing my own generator was fun. It wasn't very difficult, but challenging enough to keep me interested. I wrote it in JavaScript, because I know JavaScript well enough to write usable software.</p>\n\n<p>My generator basically just reads a directory of JavaScipt plugin files and executes them. A plugin file is just a file which exports a function which takes in an array of post objects and the config object as params and returns a promise that resolves with an array of post objects. The build script runs in <code>O(n)</code> and the plugins are executed one after another.</p>\n\n<p>I wrote 6 plugins -\n\t<h5>clean</h5>\n\t<p>Delets the public directory, creates a new one and copies the assets folder from the source directory into the build directory</p>\n\t<h5>get-posts</h5>\n\t<p>Reads posts folder, generates post objects from HTML files and pushes them to the posts array</p>\n\t<h5>render-posts</h5>\n\t<p>Renders an EJS template for each post and places it in the build directory.</p>\n\t<h5>render-home</h5>\n\t<p>Renders the home EJS template.</p>\n\t<h5>rss</h5>\n\t<p>Generates an RSS feed using the posts array using the <a href=\"https://github.com/dylang/node-rss\">node-rss</a> package and writes it to <code>build/feed.xml</code> .</p>\n\t<h5>less</h5>\n\t<p>Compiles LESS stylesheets into CSS and writes to a <code>style.css</code> file in the build directory.</p></p>\n\n<p>I'm pretty happy with this setup. I can add and remove stuff pretty easily and I can edit the posts in Emacs in HTML mode. I'll write about any problems that come up.</p>\n\n<p><a href=\"https://github.com/angad19/blog\">Github</a></p>\n",
		"display": true
	}
]